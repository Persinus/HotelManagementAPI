using Microsoft.AspNetCore.Mvc;
using System.Data;
using System.Threading.Tasks;
using Dapper;
using HotelManagementAPI.DTOs.KhachHang;
using System.Security.Claims;
using System.Collections.Generic;
using System.Linq;
using System;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.Annotations;
using SentimentAnalysisExample.Data;
using Microsoft.ML;
using Microsoft.Extensions.Configuration;


namespace HotelManagementAPI.Controllers
{
    [ApiController]
    [Route("api/khachhang")]
    [Authorize(Roles = "KhachHang")]
    public class KhachHangController : ControllerBase
    {
        private readonly IDbConnection _db;

        public KhachHangController(IDbConnection db)
        {
            _db = db;
        }

        // ----------- ƒê·∫∂T PH√íNG -----------
        /// <summary>
        /// ƒê·∫∑t ph√≤ng m·ªõi cho kh√°ch h√†ng.
        /// </summary>
        /// <remarks>
        /// T·∫°o ƒë∆°n ƒë·∫∑t ph√≤ng m·ªõi, ki·ªÉm tra tr·∫°ng th√°i ph√≤ng v√† d·ªãch v·ª• ƒëi k√®m.
        /// </remarks>
        // ƒê·∫∑t ph√≤ng m·ªõi
        [HttpPost("datphong")]
        [SwaggerOperation(
            Summary = "ƒê·∫∑t ph√≤ng m·ªõi",
            Description = "T·∫°o ƒë∆°n ƒë·∫∑t ph√≤ng m·ªõi cho kh√°ch h√†ng, ki·ªÉm tra tr·∫°ng th√°i ph√≤ng v√† d·ªãch v·ª• ƒëi k√®m."
)]
[SwaggerResponse(200, "ƒê·∫∑t ph√≤ng th√†nh c√¥ng, tr·∫£ v·ªÅ m√£ ƒë·∫∑t ph√≤ng v√† t·ªïng ti·ªÅn t·∫°m t√≠nh.")]
[SwaggerResponse(400, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ph√≤ng/d·ªãch v·ª• kh√¥ng h·ª£p l·ªá.")]
[SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.")]
public async Task<IActionResult> TaoDonDatPhong([FromBody] KhachHangDatPhongDTO datPhongDTO)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    datPhongDTO.MaNguoiDung = maNguoiDung;
    datPhongDTO.MaDatPhong = await GenerateUniqueMaDatPhong();
    datPhongDTO.NgayDat = DateTime.Now;

    // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng
    const string checkPhongQuery = "SELECT TinhTrang FROM Phong WHERE MaPhong = @MaPhong";
    var tinhTrang = await _db.ExecuteScalarAsync<byte?>(checkPhongQuery, new { datPhongDTO.MaPhong });
    if (tinhTrang != 1)
        return BadRequest(new { Message = "Ph√≤ng n√†y kh√¥ng c√≤n tr·ªëng ƒë·ªÉ ƒë·∫∑t." });

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë·∫∑t ph√≤ng FE g·ª≠i l√™n
    if (datPhongDTO.TinhTrangDatPhong != 1)
        return BadRequest(new { Message = "Ph√≤ng n√†y b·∫°n ƒë√£ ƒë·∫∑t sang h√≥a ƒë∆°n ƒë·ªÉ xem." });

    // Ki·ªÉm tra d·ªãch v·ª• ƒëi k√®m (n·∫øu c√≥)
    if (datPhongDTO.DichVuDiKem != null && datPhongDTO.DichVuDiKem.Any())
    {
        foreach (var dv in datPhongDTO.DichVuDiKem)
        {
            if (dv.SoLuong <= 0)
                return BadRequest(new { Message = $"S·ªë l∆∞·ª£ng d·ªãch v·ª• {dv.MaDichVu} ph·∫£i l·ªõn h∆°n 0." });

            const string checkDichVuQuery = "SELECT SoLuong FROM DichVu WHERE MaDichVu = @MaDichVu";
            var dichVuSoLuong = await _db.ExecuteScalarAsync<int?>(checkDichVuQuery, new { dv.MaDichVu });
            if (dichVuSoLuong == null)
                return NotFound(new { Message = $"M√£ d·ªãch v·ª• {dv.MaDichVu} kh√¥ng t·ªìn t·∫°i." });

            if (dichVuSoLuong == 0)
                return BadRequest(new { Message = $"D·ªãch v·ª• {dv.MaDichVu} ƒë√£ h·∫øt h√†ng." });

            if (dv.SoLuong > dichVuSoLuong)
                return BadRequest(new { Message = $"S·ªë l∆∞·ª£ng d·ªãch v·ª• {dv.MaDichVu} y√™u c·∫ßu v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≤n l·∫°i." });
        }
    }

    // L·∫•y th√¥ng tin gi√° ph√≤ng v√† gi√° ∆∞u ƒë√£i (n·∫øu c√≥)
    const string getGiaPhongQuery = "SELECT GiaPhong, GiaUuDai FROM Phong WHERE MaPhong = @MaPhong";
    var phong = await _db.QueryFirstOrDefaultAsync<(decimal GiaPhong, decimal? GiaUuDai)>(getGiaPhongQuery, new { MaPhong = datPhongDTO.MaPhong });

    // Ch·ªçn gi√° thanh to√°n: n·∫øu c√≥ gi·∫£m gi√° th√¨ l·∫•y GiaUuDai, kh√¥ng th√¨ l·∫•y GiaPhong
    decimal giaThanhToan = phong.GiaUuDai.HasValue && phong.GiaUuDai.Value < phong.GiaPhong
        ? phong.GiaUuDai.Value
        : phong.GiaPhong;

    // T√≠nh s·ªë ng√†y ·ªü (t·ªëi thi·ªÉu 1 ng√†y)
    var soNgay = (datPhongDTO.NgayCheckOut.Date - datPhongDTO.NgayCheckIn.Date).Days;
    if (soNgay < 1) soNgay = 1;

    // T√≠nh t·ªïng ti·ªÅn d·ªãch v·ª•
    decimal tongTienDichVu = 0;
    if (datPhongDTO.DichVuDiKem != null && datPhongDTO.DichVuDiKem.Any())
    {
        foreach (var dv in datPhongDTO.DichVuDiKem)
        {
            const string getDonGiaQuery = "SELECT DonGia FROM DichVu WHERE MaDichVu = @MaDichVu";
            var donGia = await _db.ExecuteScalarAsync<decimal>(getDonGiaQuery, new { dv.MaDichVu });
            tongTienDichVu += donGia * dv.SoLuong;
        }
    }

    var tongTien = giaThanhToan * soNgay + tongTienDichVu;

    // Th√™m ƒë∆°n ƒë·∫∑t ph√≤ng
    const string insertQuery = @"
        INSERT INTO DatPhong (MaDatPhong, MaNguoiDung, MaPhong, NgayDat, NgayCheckIn, NgayCheckOut, TinhTrangDatPhong)
        VALUES (@MaDatPhong, @MaNguoiDung, @MaPhong, @NgayDat, @NgayCheckIn, @NgayCheckOut, @TinhTrangDatPhong)";
    await _db.ExecuteAsync(insertQuery, datPhongDTO);

    // Ngay sau khi insert, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng sang 2
    const string updateTinhTrangDatPhong = "UPDATE DatPhong SET TinhTrangDatPhong = 2 WHERE MaDatPhong = @MaDatPhong";
    await _db.ExecuteAsync(updateTinhTrangDatPhong, new { datPhongDTO.MaDatPhong });

    // **C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng sang 2 (ƒë√£ ƒë·∫∑t)**
    const string updateTinhTrangPhong = "UPDATE Phong SET TinhTrang = 2 WHERE MaPhong = @MaPhong";
    await _db.ExecuteAsync(updateTinhTrangPhong, new { datPhongDTO.MaPhong });

    // Th√™m d·ªãch v·ª• ƒëi k√®m (n·∫øu c√≥)
    if (datPhongDTO.DichVuDiKem != null && datPhongDTO.DichVuDiKem.Any())
    {
        foreach (var dv in datPhongDTO.DichVuDiKem)
        {
            dv.MaDatDichVu = await GenerateUniqueMaDatDichVu();
            dv.MaDatPhong = datPhongDTO.MaDatPhong;
            const string insertDichVu = @"
                INSERT INTO DatDichVu (MaDatDichVu, MaDatPhong, MaDichVu, SoLuong)
                VALUES (@MaDatDichVu, @MaDatPhong, @MaDichVu, @SoLuong)";
            await _db.ExecuteAsync(insertDichVu, dv);

            const string updateDichVuQuery = "UPDATE DichVu SET SoLuong = SoLuong - @SoLuong WHERE MaDichVu = @MaDichVu";
            await _db.ExecuteAsync(updateDichVuQuery, new { dv.SoLuong, dv.MaDichVu });
        }
    }

    // ƒê·∫∑t ph√≤ng th√†nh c√¥ng
    return Ok(new
    {
        Message = $"üéâ ƒê·∫∑t ph√≤ng th√†nh c√¥ng! T·ªïng ti·ªÅn t·∫°m t√≠nh l√†: {tongTien:N0} VNƒê. H√£y sang ph·∫ßn t·∫°o h√≥a ƒë∆°n ƒë·ªÉ ho√†n t·∫•t thanh to√°n.",
        MaDatPhong = datPhongDTO.MaDatPhong,
        TongTienTamTinh = tongTien
    });
}

        /// <summary>
        /// L·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng c·ªßa kh√°ch h√†ng.
        /// </summary>
      
        // L·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng
        [HttpGet("datphong/lichsu")]
        [SwaggerOperation(
            Summary = "L·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng",
            Description = "Tr·∫£ v·ªÅ danh s√°ch c√°c ƒë∆°n ƒë·∫∑t ph√≤ng c·ªßa kh√°ch h√†ng hi·ªán t·∫°i."
)]
[SwaggerResponse(200, "Danh s√°ch l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng.")]
[SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.")]
public async Task<IActionResult> LichSuDatPhong()
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    const string query = @"
        SELECT dp.MaDatPhong, dp.MaNguoiDung, dp.MaPhong, dp.NgayDat, dp.NgayCheckIn, dp.NgayCheckOut, dp.TinhTrangDatPhong,
               p.LoaiPhong, p.GiaPhong
        FROM DatPhong dp
        INNER JOIN Phong p ON dp.MaPhong = p.MaPhong
        WHERE dp.MaNguoiDung = @MaNguoiDung";

    var result = await _db.QueryAsync(query, new { MaNguoiDung = maNguoiDung });

    // L·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng
    if (result == null || !result.Any())
        return NotFound(new { Message = "‚ùå Xin l·ªói, b·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng n√†o." });
    return Ok(new { Message = "‚úÖ L·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng th√†nh c√¥ng.", Data = result });
}

        
        
        // ----------- H√ìA ƒê∆†N -----------
        /// <summary>
        /// L·∫•y h√≥a ƒë∆°n theo m√£ ƒë·∫∑t ph√≤ng.
        /// </summary>
        /// <param name="maDatPhong">M√£ ƒë·∫∑t ph√≤ng</param>
        [HttpGet("hoadon/by-madatphong/{maDatPhong}")]
        [SwaggerOperation(
            Summary = "L·∫•y h√≥a ƒë∆°n theo m√£ ƒë·∫∑t ph√≤ng",
            Description = "Tr·∫£ v·ªÅ h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng v·ªõi m√£ ƒë·∫∑t ph√≤ng."
        )]
        [SwaggerResponse(200, "Tr·∫£ v·ªÅ h√≥a ƒë∆°n.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng c√≥ quy·ªÅn.")]
        [SwaggerResponse(404, "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n.")]
        
public async Task<IActionResult> GetHoaDonByMaDatPhong([FromRoute] string maDatPhong)
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    const string checkQuery = "SELECT MaNguoiDung FROM DatPhong WHERE MaDatPhong = @MaDatPhong";
    var owner = await _db.ExecuteScalarAsync<string>(checkQuery, new { MaDatPhong = maDatPhong });
    if (owner != maNguoiDung)
        return Forbid("B·∫°n kh√¥ng c√≥ quy·ªÅn xem h√≥a ƒë∆°n n√†y.");

    const string query = @"SELECT * FROM HoaDon WHERE MaDatPhong = @MaDatPhong";
    var hoaDon = await _db.QueryFirstOrDefaultAsync<KhachHangHoaDonDTO>(query, new { MaDatPhong = maDatPhong });

    // L·∫•y h√≥a ƒë∆°n theo m√£ ƒë·∫∑t ph√≤ng
    if (hoaDon == null)
        return NotFound(new { Message = "‚ùå Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n cho m√£ ƒë·∫∑t ph√≤ng n√†y." });
    return Ok(new { Message = "‚úÖ L·∫•y h√≥a ƒë∆°n th√†nh c√¥ng.", Data = hoaDon });
}

        /// <summary>
        /// T·∫°o h√≥a ƒë∆°n m·ªõi cho ƒë∆°n ƒë·∫∑t ph√≤ng.
        /// </summary>
        [HttpPost("hoadon/tao")]
        [SwaggerOperation(
            Summary = "T·∫°o h√≥a ƒë∆°n m·ªõi",
            Description = "T·∫°o h√≥a ƒë∆°n m·ªõi cho ƒë∆°n ƒë·∫∑t ph√≤ng ƒë√£ ƒë·∫∑t."
        )]
        [SwaggerResponse(200, "T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng c√≥ quy·ªÅn.")]
        [SwaggerResponse(404, "Kh√¥ng t√¨m th·∫•y m√£ ƒë·∫∑t ph√≤ng.")]
        
public async Task<IActionResult> TaoHoaDon([FromBody] TaoHoaDonRequestDTO request)
{
    const string datPhongQuery = @"
        SELECT dp.MaDatPhong, dp.MaNguoiDung, dp.MaPhong, dp.NgayCheckIn, dp.NgayCheckOut
        FROM DatPhong dp
        WHERE dp.MaDatPhong = @MaDatPhong";
    var datPhong = await _db.QueryFirstOrDefaultAsync<KhachHangDatPhongDTO>(datPhongQuery, new { request.MaDatPhong });

    if (datPhong == null)
        return NotFound(new { Message = "Kh√¥ng t√¨m th·∫•y m√£ ƒë·∫∑t ph√≤ng." });

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (datPhong.MaNguoiDung != maNguoiDung)
        return Forbid("B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o h√≥a ƒë∆°n cho m√£ ƒë·∫∑t ph√≤ng n√†y.");

    const string getGiaPhongQuery = "SELECT GiaPhong FROM Phong WHERE MaPhong = @MaPhong";
    var giaPhong = await _db.ExecuteScalarAsync<decimal>(getGiaPhongQuery, new { datPhong.MaPhong });

    // T√≠nh s·ªë ng√†y ·ªü (t·ªëi thi·ªÉu 1 ng√†y)
    var soNgay = (datPhong.NgayCheckOut.Date - datPhong.NgayCheckIn.Date).Days;
    if (soNgay < 1) soNgay = 1;

    // T√≠nh t·ªïng ti·ªÅn d·ªãch v·ª•
    const string getDichVuQuery = @"
        SELECT ddv.SoLuong, dv.DonGia
        FROM DatDichVu ddv
        INNER JOIN DichVu dv ON ddv.MaDichVu = dv.MaDichVu
        WHERE ddv.MaDatPhong = @MaDatPhong";
    var dichVus = await _db.QueryAsync<(int SoLuong, decimal DonGia)>(getDichVuQuery, new { datPhong.MaDatPhong });
    decimal tongTienDichVu = dichVus.Sum(x => x.SoLuong * x.DonGia);

    // T·ªïng ti·ªÅn h√≥a ƒë∆°n
    decimal tongTien = giaPhong * soNgay + tongTienDichVu;

    // Kh√¥ng √°p d·ª•ng gi·∫£m gi√° t·ª´ request n·ªØa
    decimal tongTienSauGiamGia = tongTien; // Gi·ªØ nguy√™n t·ªïng ti·ªÅn

    string maHoaDon = await GenerateUniqueMaHoaDon();

    const string insertHoaDonQuery = @"
        INSERT INTO HoaDon (MaHoaDon, MaNguoiDung, MaDatPhong, TongTien, NgayTaoHoaDon, NgayThanhToan, TinhTrangHoaDon)
        VALUES (@MaHoaDon, @MaNguoiDung, @MaDatPhong, @TongTien, @NgayTaoHoaDon, @NgayThanhToan, @TinhTrangHoaDon)";
    var hoaDonDTO = new KhachHangHoaDonDTO
    {
        MaHoaDon = maHoaDon,
        MaNguoiDung = datPhong.MaNguoiDung!,
        MaDatPhong = datPhong.MaDatPhong!,
        TongTien = tongTienSauGiamGia,
        NgayTaoHoaDon = DateTime.Now,
        NgayThanhToan = null,
        TinhTrangHoaDon = 1
    };
    await _db.ExecuteAsync(insertHoaDonQuery, hoaDonDTO);

    // T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng
    return Ok(new { Message = "üéâ T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng! Vui l√≤ng ti·∫øn h√†nh thanh to√°n.", Data = hoaDonDTO });
}

        // ----------- THANH TO√ÅN -----------
        /// <summary>
        /// Thanh to√°n h√≥a ƒë∆°n.
        /// </summary>
        [HttpPost("thanhtoan")]
        [SwaggerOperation(
            Summary = "Thanh to√°n h√≥a ƒë∆°n",
            Description = "Th·ª±c hi·ªán thanh to√°n cho h√≥a ƒë∆°n c·ªßa kh√°ch h√†ng."
        )]
        [SwaggerResponse(200, "Thanh to√°n th√†nh c√¥ng.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng c√≥ quy·ªÅn.")]
public async Task<IActionResult> ThanhToan([FromBody] KhachHangThanhToanDTO request)
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    // L·∫•y h√≥a ƒë∆°n
    const string hoaDonQuery = "SELECT * FROM HoaDon WHERE MaHoaDon = @MaHoaDon";
    var hoaDon = await _db.QueryFirstOrDefaultAsync<KhachHangHoaDonDTO>(hoaDonQuery, new { request.MaHoaDon });
    if (hoaDon == null)
        return NotFound(new { Message = "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n." });

    if (hoaDon.MaNguoiDung != maNguoiDung)
        return Forbid("B·∫°n kh√¥ng c√≥ quy·ªÅn thanh to√°n h√≥a ƒë∆°n n√†y.");

    if (hoaDon.TinhTrangHoaDon == 2)
        return BadRequest(new { Message = "H√≥a ƒë∆°n n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n." });

    decimal soTienPhaiTra = hoaDon.TongTien;
    decimal soTienKhachTra = request.SoTienThanhToan;

    if (soTienKhachTra < soTienPhaiTra)
    {
        decimal thieu = soTienPhaiTra - soTienKhachTra;
        return BadRequest(new { Message = $"‚ùå Vui l√≤ng tr·∫£ ƒë·ªß s·ªë ti·ªÅn. B·∫°n c√≤n thi·∫øu {thieu:N0} ƒë·ªìng." });
    }

    // Sinh m√£ thanh to√°n t·ª± ƒë·ªông
    const string getMaxSql = "SELECT ISNULL(MAX(CAST(SUBSTRING(MaThanhToan, 3, LEN(MaThanhToan)-2) AS INT)), 0) + 1 FROM ThanhToan";
    var nextId = await _db.ExecuteScalarAsync<int>(getMaxSql);
    var maThanhToan = $"TT{nextId:D3}";

    var now = DateTime.Now;

    // C·∫≠p nh·∫≠t h√≥a ƒë∆°n: ƒë√£ thanh to√°n
    const string updateHoaDonQuery = @"
        UPDATE HoaDon
        SET NgayThanhToan = @NgayThanhToan, TinhTrangHoaDon = 2
        WHERE MaHoaDon = @MaHoaDon";
    await _db.ExecuteAsync(updateHoaDonQuery, new { NgayThanhToan = now, MaHoaDon = request.MaHoaDon });

    // Th√™m b·∫£n ghi thanh to√°n
    const string insertThanhToanQuery = @"
        INSERT INTO ThanhToan (MaThanhToan, MaHoaDon, SoTienThanhToan, NgayThanhToan, PhuongThucThanhToan, TinhTrangThanhToan)
        VALUES (@MaThanhToan, @MaHoaDon, @SoTienThanhToan, @NgayThanhToan, @PhuongThucThanhToan, @TinhTrangThanhToan)";
    await _db.ExecuteAsync(insertThanhToanQuery, new
    {
        MaThanhToan = maThanhToan,
        MaHoaDon = request.MaHoaDon,
        SoTienThanhToan = soTienKhachTra,
        NgayThanhToan = now,
        PhuongThucThanhToan = request.PhuongThucThanhToan,
        TinhTrangThanhToan = 2 // 1: ƒê√£ thanh to√°n
    });

    if (soTienKhachTra == soTienPhaiTra)
    {
        return Ok(new { Message = "üéâ Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.", MaThanhToan = maThanhToan, NgayThanhToan = now });
    }
    else // Kh√°ch tr·∫£ th·ª´a
    {
        decimal tienThua = soTienKhachTra - soTienPhaiTra;
        return Ok(new
        {
            Message = $"üéâ Thanh to√°n th√†nh c√¥ng! B·∫°n ƒë√£ tr·∫£ th·ª´a {tienThua:N0} ƒë·ªìng, s·ªë ti·ªÅn n√†y s·∫Ω ƒë∆∞·ª£c nh√¢n vi√™n ho√†n l·∫°i.",
            MaThanhToan = maThanhToan,
            NgayThanhToan = now
        });
    }
}

        /// <summary>
        /// L·∫•y l·ªãch s·ª≠ thanh to√°n c·ªßa kh√°ch h√†ng.
        /// </summary>
        [HttpGet("thanhtoan/lichsu")]
        [SwaggerOperation(
            Summary = "L·∫•y l·ªãch s·ª≠ thanh to√°n",
            Description = "Tr·∫£ v·ªÅ danh s√°ch c√°c giao d·ªãch thanh to√°n c·ªßa kh√°ch h√†ng."
        )]
        [SwaggerResponse(200, "Danh s√°ch l·ªãch s·ª≠ thanh to√°n.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.")]
        [SwaggerResponse(404, "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ thanh to√°n.")]
public async Task<IActionResult> LichSuThanhToan()
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    const string query = @"
        SELECT t.*
        FROM ThanhToan t
        INNER JOIN HoaDon h ON t.MaHoaDon = h.MaHoaDon
        WHERE h.MaNguoiDung = @MaNguoiDung
        ORDER BY t.NgayThanhToan DESC";

    var lichSu = await _db.QueryAsync<KhachHangThanhToanDTO>(query, new { MaNguoiDung = maNguoiDung });
    // L·ªãch s·ª≠ thanh to√°n
    if (lichSu == null || !lichSu.Any())
        return NotFound(new { Message = "‚ùå Xin l·ªói, b·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ thanh to√°n n√†o." });
    return Ok(new { Message = "‚úÖ L·∫•y l·ªãch s·ª≠ thanh to√°n th√†nh c√¥ng.", Data = lichSu });
}

        /// <summary>
        /// L·∫•y t·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch c·ªßa kh√°ch h√†ng.
        /// </summary>
        [HttpGet("lichsu")]
        [SwaggerOperation(
            Summary = "L·∫•y t·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch",
            Description = "Tr·∫£ v·ªÅ t·ªïng h·ª£p l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng, h√≥a ƒë∆°n, thanh to√°n c·ªßa kh√°ch h√†ng."
        )]
        [SwaggerResponse(200, "T·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.")]
        // L·∫•y t·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch
        
public async Task<IActionResult> GetLichSuGiaoDich()
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    const string datPhongQuery = @"
        SELECT MaDatPhong, MaPhong, NgayDat, NgayCheckIn, NgayCheckOut, TinhTrangDatPhong
        FROM DatPhong
        WHERE MaNguoiDung = @MaNguoiDung";
    var datPhongs = await _db.QueryAsync(datPhongQuery, new { MaNguoiDung = maNguoiDung });

    const string hoaDonQuery = @"
        SELECT MaHoaDon, MaDatPhong, TongTien, NgayTaoHoaDon, NgayThanhToan, TinhTrangHoaDon
        FROM HoaDon
        WHERE MaNguoiDung = @MaNguoiDung";
    var hoaDons = await _db.QueryAsync(hoaDonQuery, new { MaNguoiDung = maNguoiDung });

    const string thanhToanQuery = @"
        SELECT t.MaThanhToan, t.MaHoaDon, t.SoTienThanhToan, t.NgayThanhToan, t.PhuongThucThanhToan, t.TinhTrangThanhToan
        FROM ThanhToan t
        INNER JOIN HoaDon h ON t.MaHoaDon = h.MaHoaDon
        WHERE h.MaNguoiDung = @MaNguoiDung";
    var thanhToans = await _db.QueryAsync(thanhToanQuery, new { MaNguoiDung = maNguoiDung });

    // T·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch
    return Ok(new
    {
        Message = "‚úÖ L·∫•y t·ªïng h·ª£p l·ªãch s·ª≠ giao d·ªãch th√†nh c√¥ng.",
        DatPhongs = datPhongs,
        HoaDons = hoaDons,
        ThanhToans = thanhToans
    });
}

        /// <summary>
        /// G·ª≠i feedback t·ª´ kh√°ch h√†ng.
        /// </summary>
        [HttpPost("feedback")]
        [SwaggerOperation(Summary = "G·ª≠i feedback", Description = "Kh√°ch h√†ng g·ª≠i feedback, h·ªá th·ªëng t·ª± ph√¢n lo·∫°i t√≠ch c·ª±c/ti√™u c·ª±c.")]
        [SwaggerResponse(200, "G·ª≠i feedback th√†nh c√¥ng.")]
        [SwaggerResponse(401, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.")]
    public async Task<IActionResult> GuiFeedback([FromBody] KhachHangFeedBackDTO dto, [FromServices] SentimentModelConfig sentimentConfig)
{
    var maNguoiDung = User.FindFirstValue("sub") ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (string.IsNullOrEmpty(maNguoiDung))
        return Unauthorized(new { Message = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });

    // Ph√¢n t√≠ch c·∫£m x√∫c b√¨nh lu·∫≠n
    string phanLoai = "Ti√™u c·ª±c"; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh h·ª£p l·ªá

if (!string.IsNullOrWhiteSpace(dto.BinhLuan))
{
    var mlContext = new MLContext();
    var model = mlContext.Model.Load(sentimentConfig.ModelPath, out var schema);
    var predictionEngine = mlContext.Model.CreatePredictionEngine<SentimentData, SentimentPrediction>(model);

    var result = predictionEngine.Predict(new SentimentData { SentimentText = dto.BinhLuan });
    phanLoai = result.Prediction ? "T√≠ch c·ª±c" : "Ti√™u c·ª±c";
}

    // Sinh m√£ feedback t·ª± ƒë·ªông FBxxx
    const string getMaxSql = "SELECT ISNULL(MAX(CAST(SUBSTRING(MaFeedback, 3, LEN(MaFeedback)-2) AS INT)), 0) + 1 FROM Feedback";
    var nextId = await _db.ExecuteScalarAsync<int>(getMaxSql);
    var maFeedback = $"FB{nextId:D3}";

    // L∆∞u feedback v√†o DB
    const string insertQuery = @"
        INSERT INTO Feedback (MaFeedback, MaNguoiDung, MaPhong, SoSao, BinhLuan, PhanLoai, NgayFeedback)
        VALUES (@MaFeedback, @MaNguoiDung, @MaPhong, @SoSao, @BinhLuan, @PhanLoai, @NgayFeedback)";
    await _db.ExecuteAsync(insertQuery, new
    {
        MaFeedback = maFeedback,
        MaNguoiDung = maNguoiDung,
        MaPhong = dto.MaPhong,
        SoSao = dto.SoSao,
        BinhLuan = dto.BinhLuan,
        PhanLoai = phanLoai,
        NgayFeedback = DateTime.Now
    });

    // G·ª≠i feedback th√†nh c√¥ng
    return Ok(new { Message = "üéâ G·ª≠i feedback th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p √Ω ki·∫øn.", MaFeedback = maFeedback, PhanLoai = phanLoai });
}

        // ----------- Helper methods -----------
        private async Task<string> GenerateUniqueMaDatPhong()
        {
            const string query = @"
                SELECT ISNULL(MAX(CAST(SUBSTRING(MaDatPhong, 3, LEN(MaDatPhong) - 2) AS INT)), 0) + 1
                FROM DatPhong";
            var nextId = await _db.ExecuteScalarAsync<int>(query);
            return $"DP{nextId:D3}";
        }

        private async Task<string> GenerateUniqueMaDatDichVu()
        {
            const string query = @"
                SELECT ISNULL(MAX(CAST(SUBSTRING(MaDatDichVu, 4, LEN(MaDatDichVu) - 3) AS INT)), 0) + 1
                FROM DatDichVu";
            var nextId = await _db.ExecuteScalarAsync<int>(query);
            return $"DDV{nextId:D3}";
        }

        private async Task<string> GenerateUniqueMaHoaDon()
        {
            const string query = @"
                SELECT ISNULL(MAX(CAST(SUBSTRING(MaHoaDon, 3, LEN(MaHoaDon) - 2) AS INT)), 0) + 1
                FROM HoaDon";
            var nextId = await _db.ExecuteScalarAsync<int>(query);
            return $"HD{nextId:D3}";
        }
/// <summary>
/// H·ªßy thanh to√°n: x√≥a thanh to√°n, x√≥a h√≥a ƒë∆°n, ph·ª•c h·ªìi tr·∫°ng th√°i ph√≤ng v√† tr·∫°ng th√°i ƒë·∫∑t ph√≤ng.
/// </summary>
[HttpDelete("thanhtoan/huy/{maThanhToan}")]
[SwaggerOperation(
    Summary = "H·ªßy thanh to√°n",
    Description = "X√≥a thanh to√°n, x√≥a h√≥a ƒë∆°n li√™n quan, ph·ª•c h·ªìi tr·∫°ng th√°i ph√≤ng v√† tr·∫°ng th√°i ƒë·∫∑t ph√≤ng v·ªÅ 1."
)]
[SwaggerResponse(200, "H·ªßy thanh to√°n th√†nh c√¥ng.")]
[SwaggerResponse(404, "Kh√¥ng t√¨m th·∫•y m√£ thanh to√°n.")]
public async Task<IActionResult> HuyThanhToan([FromRoute] string maThanhToan)
{
    // L·∫•y m√£ h√≥a ƒë∆°n t·ª´ thanh to√°n
    const string getHoaDonQuery = "SELECT MaHoaDon FROM ThanhToan WHERE MaThanhToan = @MaThanhToan";
    var maHoaDon = await _db.ExecuteScalarAsync<string>(getHoaDonQuery, new { MaThanhToan = maThanhToan });
    if (string.IsNullOrEmpty(maHoaDon))
        return NotFound(new { Message = "Kh√¥ng t√¨m th·∫•y m√£ thanh to√°n." });

    // L·∫•y m√£ ƒë·∫∑t ph√≤ng t·ª´ h√≥a ƒë∆°n
    const string getDatPhongQuery = "SELECT MaDatPhong FROM HoaDon WHERE MaHoaDon = @MaHoaDon";
    var maDatPhong = await _db.ExecuteScalarAsync<string>(getDatPhongQuery, new { MaHoaDon = maHoaDon });
    if (string.IsNullOrEmpty(maDatPhong))
        return NotFound(new { Message = "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n li√™n quan." });

    // L·∫•y m√£ ph√≤ng t·ª´ ƒë·∫∑t ph√≤ng
    const string getMaPhongQuery = "SELECT MaPhong FROM DatPhong WHERE MaDatPhong = @MaDatPhong";
    var maPhong = await _db.ExecuteScalarAsync<string>(getMaPhongQuery, new { MaDatPhong = maDatPhong });

    // X√≥a thanh to√°n
    const string deleteThanhToan = "DELETE FROM ThanhToan WHERE MaThanhToan = @MaThanhToan";
    await _db.ExecuteAsync(deleteThanhToan, new { MaThanhToan = maThanhToan });

    // X√≥a h√≥a ƒë∆°n
    const string deleteHoaDon = "DELETE FROM HoaDon WHERE MaHoaDon = @MaHoaDon";
    await _db.ExecuteAsync(deleteHoaDon, new { MaHoaDon = maHoaDon });

    // Ph·ª•c h·ªìi tr·∫°ng th√°i ph√≤ng v·ªÅ 1 (ch∆∞a ƒë·∫∑t)
    const string updatePhong = "UPDATE Phong SET TinhTrang = 1 WHERE MaPhong = @MaPhong";
    await _db.ExecuteAsync(updatePhong, new { MaPhong = maPhong });

    // Ph·ª•c h·ªìi tr·∫°ng th√°i ƒë·∫∑t ph√≤ng v·ªÅ 1 (ch∆∞a ƒë·∫∑t)
    const string updateDatPhong = "UPDATE DatPhong SET TinhTrangDatPhong = 1 WHERE MaDatPhong = @MaDatPhong";
    await _db.ExecuteAsync(updateDatPhong, new { MaDatPhong = maDatPhong });

    // H·ªßy thanh to√°n th√†nh c√¥ng
    return Ok(new { Message = "‚úÖ H·ªßy thanh to√°n th√†nh c√¥ng. Ph√≤ng ƒë√£ ƒë∆∞·ª£c m·ªü l·∫°i cho kh√°ch kh√°c." });
}

        /// <summary>
        /// Ph√¢n lo·∫°i b√¨nh lu·∫≠n.
        /// </summary>
        /// <param name="binhLuan">N·ªôi dung b√¨nh lu·∫≠n</param>
        [HttpPost("phanloai-binhluan")]
        [SwaggerOperation(Summary = "Ph√¢n lo·∫°i b√¨nh lu·∫≠n", Description = "Nh·∫≠p b√¨nh lu·∫≠n, tr·∫£ v·ªÅ ph√¢n lo·∫°i t√≠ch c·ª±c/ti√™u c·ª±c.")]
public IActionResult PhanLoaiBinhLuan([FromBody] string binhLuan, [FromServices] SentimentModelConfig sentimentConfig)
{
    if (string.IsNullOrWhiteSpace(binhLuan))
        return BadRequest(new { Message = "‚ùå B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });

    var mlContext = new MLContext();
    var model = mlContext.Model.Load(sentimentConfig.ModelPath, out var schema);
    var predictionEngine = mlContext.Model.CreatePredictionEngine<SentimentData, SentimentPrediction>(model);

    var result = predictionEngine.Predict(new SentimentData { SentimentText = binhLuan });
    var phanLoai = result.Prediction ? "T√≠ch c·ª±c" : "Ti√™u c·ª±c";

    return Ok(new { Message = "‚úÖ Ph√¢n lo·∫°i b√¨nh lu·∫≠n th√†nh c√¥ng.", PhanLoai = phanLoai });
}
    }
}