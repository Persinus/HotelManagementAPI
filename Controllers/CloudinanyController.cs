using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Microsoft.AspNetCore.Authorization;

#region Gi·ªõi thi·ªáu Cloudinary
// Cloudinary l√† d·ªãch v·ª• ƒë√°m m√¢y chuy√™n d√πng ƒë·ªÉ l∆∞u tr·ªØ, x·ª≠ l√Ω v√† ph√¢n ph·ªëi h√¨nh ·∫£nh, video.
// ∆Øu ƒëi·ªÉm: t·ª± ƒë·ªông t·ªëi ∆∞u h√≥a, h·ªó tr·ª£ CDN, ch·ªânh s·ª≠a ·∫£nh/video linh ho·∫°t qua URL.
// Website: https://cloudinary.com
// Th∆∞ vi·ªán .NET: CloudinaryDotNet
#endregion

[ApiController]
[AllowAnonymous]
[Route("api/[controller]")]
public class UploadController : ControllerBase
{
    private readonly Cloudinary _cloudinary; // ƒê·ªëi t∆∞·ª£ng d√πng ƒë·ªÉ giao ti·∫øp v·ªõi Cloudinary
    private readonly CloudinarySettings _settings; // C·∫•u h√¨nh (CloudName, ApiKey, ApiSecret)

    // Constructor kh·ªüi t·∫°o Cloudinary t·ª´ c·∫•u h√¨nh trong appsettings.json
    public UploadController(IOptions<CloudinarySettings> config)
    {
        _settings = config.Value;

        // Debug ki·ªÉm tra c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c load ch∆∞a
        Console.WriteLine("==== Cloudinary Configuration ====");
        Console.WriteLine($"CloudName: {_settings.CloudName}");
        Console.WriteLine($"ApiKey: {_settings.ApiKey}");
        Console.WriteLine($"ApiSecret: {_settings.ApiSecret}");
        Console.WriteLine("==================================");

        // Kh·ªüi t·∫°o t√†i kho·∫£n Cloudinary t·ª´ c·∫•u h√¨nh
        var account = new Account(
            _settings.CloudName,
            _settings.ApiKey,
            _settings.ApiSecret
        );

        // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Cloudinary
        _cloudinary = new Cloudinary(account);
    }

    // API ki·ªÉm tra c·∫•u h√¨nh Cloudinary ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng ch∆∞a
    [HttpGet("config")]
    public IActionResult GetCloudinaryConfig()
    {
        if (string.IsNullOrWhiteSpace(_settings.CloudName) ||
            string.IsNullOrWhiteSpace(_settings.ApiKey) ||
            string.IsNullOrWhiteSpace(_settings.ApiSecret))
        {
            // N·∫øu thi·∫øu c·∫•u h√¨nh => tr·∫£ v·ªÅ l·ªói
            return BadRequest("‚ùå Cloudinary config is missing or invalid.");
        }

        // Tr·∫£ v·ªÅ c·∫•u h√¨nh (·∫©n ApiSecret v√¨ l√Ω do b·∫£o m·∫≠t)
        return Ok(new
        {
            message = "‚úÖ Cloudinary config loaded successfully.",
            cloudName = _settings.CloudName,
            apiKey = _settings.ApiKey,
            apiSecret = "********", // Kh√¥ng in th·∫≠t ApiSecret ra ngo√†i
        });
    }

    // API upload 1 file ·∫£nh l√™n Cloudinary
    [HttpPost("image")]
    public async Task<IActionResult> UploadImage(IFormFile file)
    {
        // Ki·ªÉm tra c·∫•u h√¨nh Cloudinary
        if (string.IsNullOrWhiteSpace(_settings.CloudName) ||
            string.IsNullOrWhiteSpace(_settings.ApiKey) ||
            string.IsNullOrWhiteSpace(_settings.ApiSecret))
        {
            return BadRequest("‚ùå Cloudinary settings are not configured properly.");
        }

        // Ki·ªÉm tra file h·ª£p l·ªá
        if (file == null || file.Length == 0)
        {
            return BadRequest("‚ùå No file uploaded.");
        }

        try
        {
            // M·ªü stream t·ª´ file upload
            await using var stream = file.OpenReadStream();

            // T·∫°o tham s·ªë upload
            var uploadParams = new ImageUploadParams
            {
                File = new FileDescription(file.FileName, stream),
                Transformation = new Transformation().Width(800).Height(800).Crop("limit"), // Resize ·∫£nh
                Folder = "test_upload" // Th∆∞ m·ª•c tr√™n Cloudinary
            };

            // Th·ª±c hi·ªán upload
            var uploadResult = await _cloudinary.UploadAsync(uploadParams);

            // N·∫øu th√†nh c√¥ng
            if (uploadResult.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Console.WriteLine("‚úÖ Upload successful!");
                Console.WriteLine($"üîó Image URL: {uploadResult.SecureUrl}");

                return Ok(new
                {
                    message = "‚úÖ Upload successful",
                    url = uploadResult.SecureUrl.ToString() // Tr·∫£ v·ªÅ link ·∫£nh
                });
            }

            // N·∫øu th·∫•t b·∫°i
            Console.WriteLine($"‚ùå Upload failed: {uploadResult.Error?.Message}");
            return StatusCode(500, $"‚ùå Upload failed: {uploadResult.Error?.Message}");
        }
        catch (Exception ex)
        {
            // B·∫Øt l·ªói v√† log
            Console.WriteLine($"‚ùå Exception during upload: {ex.Message}");
            return StatusCode(500, $"‚ùå Exception during upload: {ex.Message}");
        }
    }
}
