using Microsoft.AspNetCore.Mvc;
using System.Data;
using Dapper;  // ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√†i Dapper qua NuGet
using System.Threading.Tasks;
using System.Linq;
using HotelManagementAPI.Models;
using System.Text.RegularExpressions;

namespace HotelManagementAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ChatbotSmartController : ControllerBase
    {
        private readonly IDbConnection _db;

        // Constructor nh·∫≠n v√†o IDbConnection ƒë·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
        public ChatbotSmartController(IDbConnection db)
        {
            _db = db;
        }

        // Endpoint ƒë·ªÉ x·ª≠ l√Ω truy v·∫•n ph√≤ng
        /// <summary>
        /// X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng.
        /// </summary>
       
        /// <remarks>
        /// <para><b>M√¥ t·∫£:</b> API n√†y nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ th√¥ng tin li√™n quan ƒë·∫øn ph√≤ng ho·∫∑c d·ªãch v·ª•.</para>
        /// <para><b>T·ª´ kh√≥a h·ªó tr·ª£:</b></para>
        /// <list type="bullet">
        /// <item>
        /// <term>Ph√≤ng</term>
        /// <description>"lo·∫°i ph√≤ng", "gi√° ph√≤ng", "t√¨nh tr·∫°ng", "m√¥ t·∫£", "ti·ªán nghi", "h√¨nh ·∫£nh", "s·ªë l∆∞·ª£ng ph√≤ng", "sao trung b√¨nh", "t·∫ßng", "ki·ªÉu gi∆∞·ªùng".</description>
        /// </item>
        /// <item>
        /// <term>D·ªãch v·ª•</term>
        /// <description>"t√™n d·ªãch v·ª•", "ƒë∆°n gi√°", "m√¥ t·∫£", "h√¨nh ·∫£nh", "tr·∫°ng th√°i".</description>
        /// </item>
        /// <item>
        /// <term>T·ª´ kh√≥a ƒë·∫∑c bi·ªát</term>
        /// <description>"t·∫•t c·∫£", "th√¥ng tin".</description>
        /// </item>
        /// </list>
        /// <para><b>V√≠ d·ª• c√¢u h·ªèi:</b></para>
        /// <list type="bullet">
        /// <item>
        /// <term>C√¢u h·ªèi v·ªÅ ph√≤ng</term>
        /// <description>
        /// "T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ ph√≤ng P201."<br />
        /// "Ph√≤ng P202 c√≥ nh·ªØng ti·ªán nghi g√¨?"<br />
        /// "Gi√° ph√≤ng P303 l√† bao nhi√™u?"<br />
        /// "T√¥i mu·ªën bi·∫øt t·∫•t c·∫£ ph√≤ng."<br />
        /// "Kh√°ch s·∫°n c√≥ bao nhi√™u ph√≤ng v√† gi√° ph√≤ng dao ƒë·ªông nh∆∞ th·∫ø n√†o?"<br />
        /// </description>
        /// </item>
        /// <item>
        /// <term>C√¢u h·ªèi v·ªÅ d·ªãch v·ª•</term>
        /// <description>
        /// "T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ d·ªãch v·ª• DV001."<br />
        /// "D·ªãch v·ª• DV002 c√≥ gi√° bao nhi√™u?"<br />
        /// "T√¥i mu·ªën bi·∫øt t·∫•t c·∫£ d·ªãch v·ª•."<br />
        /// "Kh√°ch s·∫°n c√≥ nh·ªØng d·ªãch v·ª• n√†o v√† gi√° dao ƒë·ªông ra sao?"<br />
        /// </description>
        /// </item>
        /// <item>
        /// <term>C√¢u h·ªèi k·∫øt h·ª£p</term>
        /// <description>
        /// "T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ ph√≤ng P101 v√† d·ªãch v·ª• DV001."<br />
        /// "Ph√≤ng P202 v√† d·ªãch v·ª• DV002 c√≥ g√¨ ƒë·∫∑c bi·ªát?"<br />
        /// </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <param name="request">C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng.</param>
        /// <returns>Th√¥ng tin li√™n quan ƒë·∫øn ph√≤ng ho·∫∑c d·ªãch v·ª•.</returns>
        [HttpPost("process")]
        public async Task<IActionResult> ProcessQuery([FromBody] QueryRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.Question))
            {
                return Ok(new
                {
                    message = "ü§î B·∫°n h√£y h·ªèi g√¨ ƒë√≥ ƒëi, nh·ªõ ph·∫£i k√®m theo t·ª´ kh√≥a nh√©! V√≠ d·ª•: 'T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ ph√≤ng P201.' ho·∫∑c 'T√¥i mu·ªën bi·∫øt t·∫•t c·∫£ d·ªãch v·ª•.'"
                });
            }

            // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a t·ª´ kh√≥a "t·∫•t c·∫£"
            if (request.Question.Contains("t·∫•t c·∫£", StringComparison.OrdinalIgnoreCase))
            {
                if (request.Question.Contains("ph√≤ng", StringComparison.OrdinalIgnoreCase))
                {
                    var hotelOverview = await GetHotelOverview();
                    return Ok(new { message = hotelOverview });
                }
                else if (request.Question.Contains("d·ªãch v·ª•", StringComparison.OrdinalIgnoreCase))
                {
                    var serviceOverview = await GetServiceOverview();
                    return Ok(new { message = serviceOverview });
                }
            }

            // X·ª≠ l√Ω c√¢u h·ªèi v√† tr√≠ch xu·∫•t th√¥ng tin
            var extractedInfo = ExtractQuery(request.Question);

            if (extractedInfo.RoomCode == null)
            {
                return Ok(new
                {
                    message = "ü§î Kh√¥ng t√¨m th·∫•y m√£ h·ª£p l·ªá trong c√¢u h·ªèi. H√£y th·ª≠ h·ªèi nh∆∞: 'T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ ph√≤ng P201.' ho·∫∑c 'T√¥i mu·ªën bi·∫øt t·∫•t c·∫£ d·ªãch v·ª•.'"
                });
            }

            if (extractedInfo.RoomCode.StartsWith("P", StringComparison.OrdinalIgnoreCase))
            {
                var roomDetails = await GetRoomDetails(extractedInfo.RoomCode);

                if (roomDetails == null)
                {
                    return Ok(new { message = $"üòî Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ph√≤ng {extractedInfo.RoomCode}." });
                }

                var filteredRoomDetails = FilterRoomDetails(roomDetails, extractedInfo.Fields);
                string responseText = GenerateResponseText(extractedInfo.RoomCode, filteredRoomDetails);

                return Ok(new { message = responseText });
            }
            else if (extractedInfo.RoomCode.StartsWith("DV", StringComparison.OrdinalIgnoreCase))
            {
                var serviceDetails = await GetServiceDetails(extractedInfo.RoomCode);

                if (serviceDetails == null)
                {
                    return Ok(new { message = $"üòî Kh√¥ng t√¨m th·∫•y th√¥ng tin cho d·ªãch v·ª• {extractedInfo.RoomCode}." });
                }

                var filteredServiceDetails = FilterServiceDetails(serviceDetails, extractedInfo.Fields);
                string responseText = GenerateServiceResponseText(extractedInfo.RoomCode, filteredServiceDetails);

                return Ok(new { message = responseText });
            }

            return Ok(new { message = "ü§î Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i c√¢u h·ªèi. H√£y th·ª≠ h·ªèi nh∆∞: 'T√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ ph√≤ng P201.' ho·∫∑c 'T√¥i mu·ªën bi·∫øt t·∫•t c·∫£ d·ªãch v·ª•.'" });
        }

        // H√†m tr√≠ch xu·∫•t m√£ v√† c√°c tr∆∞·ªùng th√¥ng tin t·ª´ c√¢u h·ªèi
        private RoomQueryResult ExtractQuery(string query)
        {
            // Bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ t√¨m m√£ ph√≤ng ho·∫∑c m√£ d·ªãch v·ª•
            string codePattern = @"\b(P\d{3}|DV\d{3})\b"; // ƒê·ªãnh d·∫°ng "Pxxx" ho·∫∑c "DVxxx"
            string fieldPattern = @"t√™n d·ªãch v·ª•|ƒë∆°n gi√°|m√¥ t·∫£|h√¨nh ·∫£nh|tr·∫°ng th√°i|lo·∫°i ph√≤ng|gi√° ph√≤ng|t√¨nh tr·∫°ng|ti·ªán nghi|sao trung b√¨nh|t·∫ßng|ki·ªÉu gi∆∞·ªùng|th√¥ng tin";

            // T√¨m m√£ ph√≤ng ho·∫∑c m√£ d·ªãch v·ª•
            var codeMatch = Regex.Match(query, codePattern, RegexOptions.IgnoreCase);
            string queryWithoutCode = Regex.Replace(query, codePattern, "", RegexOptions.IgnoreCase).Trim();
            var fieldMatches = Regex.Matches(queryWithoutCode, fieldPattern, RegexOptions.IgnoreCase)
                                     .Cast<Match>()
                                     .Select(m => m.Value)
                                     .ToList();

            // N·∫øu t·ª´ kh√≥a "Th√¥ng tin" xu·∫•t hi·ªán, th√™m t·∫•t c·∫£ c√°c thu·ªôc t√≠nh
            if (fieldMatches.Contains("th√¥ng tin", StringComparer.OrdinalIgnoreCase))
            {
                if (codeMatch.Value.StartsWith("P", StringComparison.OrdinalIgnoreCase))
                {
                    // Th√™m t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa ph√≤ng
                    fieldMatches = new List<string>
                    {
                        "lo·∫°i ph√≤ng", "gi√° ph√≤ng", "t√¨nh tr·∫°ng", "m√¥ t·∫£", "ti·ªán nghi", "h√¨nh ·∫£nh", "s·ªë l∆∞·ª£ng ph√≤ng", "sao trung b√¨nh", "t·∫ßng", "ki·ªÉu gi∆∞·ªùng"
                    };
                }
                else if (codeMatch.Value.StartsWith("DV", StringComparison.OrdinalIgnoreCase))
                {
                    // Th√™m t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa d·ªãch v·ª•
                    fieldMatches = new List<string>
                    {
                        "t√™n d·ªãch v·ª•", "ƒë∆°n gi√°", "m√¥ t·∫£", "h√¨nh ·∫£nh", "tr·∫°ng th√°i"
                    };
                }
            }

            return new RoomQueryResult
            {
                RoomCode = codeMatch.Success ? codeMatch.Value : null,
                Fields = fieldMatches
            };
        }

        // H√†m l·∫•y th√¥ng tin ph√≤ng t·ª´ c∆° s·ªü d·ªØ li·ªáu s·ª≠ d·ª•ng Dapper
        private async Task<PhongWithTienNghi> GetRoomDetails(string roomCode)
        {
            var sql = "SELECT * FROM PhongWithTienNghi WHERE maPhong = @RoomCode";
            var roomDetails = await _db.QueryFirstOrDefaultAsync<PhongWithTienNghi>(sql, new { RoomCode = roomCode });

            return roomDetails;
        }

        // H√†m l·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ c∆° s·ªü d·ªØ li·ªáu s·ª≠ d·ª•ng Dapper
        private async Task<DichVu> GetServiceDetails(string serviceCode)
        {
            // S·ª≠ d·ª•ng Dapper ƒë·ªÉ truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu
            var sql = "SELECT * FROM DichVu WHERE MaDichVu = @ServiceCode";
            var serviceDetails = await _db.QueryFirstOrDefaultAsync<DichVu>(sql, new { ServiceCode = serviceCode });

            return serviceDetails;
        }

        // H√†m l·∫•y th√¥ng tin t·ªïng quan v·ªÅ kh√°ch s·∫°n
        private async Task<string> GetHotelOverview()
        {
            var sql = "SELECT * FROM PhongWithTienNghi";
            var allRooms = (await _db.QueryAsync<PhongWithTienNghi>(sql)).ToList();

            if (!allRooms.Any())
            {
                return "üòî D·∫° th∆∞a qu√Ω kh√°ch, hi·ªán t·∫°i kh√°ch s·∫°n Ocean c·ªßa ch√∫ng t√¥i kh√¥ng c√≥ ph√≤ng n√†o kh·∫£ d·ª•ng.";
            }

            int totalRooms = allRooms.Count;
            decimal minPrice = allRooms.Min(r => r.GiaPhong);
            decimal maxPrice = allRooms.Max(r => r.GiaPhong);

            var allAmenities = allRooms
                .Where(r => !string.IsNullOrEmpty(r.TienNghi))
                .SelectMany(r => System.Text.Json.JsonSerializer.Deserialize<List<string>>(r.TienNghi))
                .Distinct()
                .ToList();

            string amenitiesList = string.Join(", ", allAmenities);

            var response = new List<string>
            {
                "üòä D·∫° th∆∞a qu√Ω kh√°ch, kh√°ch s·∫°n Ocean c·ªßa ch√∫ng t√¥i hi·ªán c√≥ c√°c ph√≤ng nh∆∞ sau:",
                $"- T·ªïng c·ªông c√≥ {totalRooms} ph√≤ng.",
                $"- Gi√° ph√≤ng dao ƒë·ªông t·ª´ {minPrice:N0} VND ƒë·∫øn {maxPrice:N0} VND m·ªói ƒë√™m.",
                $"- C√°c ti·ªán nghi bao g·ªìm: {amenitiesList}."
            };

            return string.Join("\n", response);
        }

        // H√†m l·∫•y th√¥ng tin t·ªïng quan v·ªÅ d·ªãch v·ª•
        private async Task<string> GetServiceOverview()
        {
            // L·∫•y danh s√°ch t·∫•t c·∫£ d·ªãch v·ª• t·ª´ c∆° s·ªü d·ªØ li·ªáu
            var sql = "SELECT * FROM DichVu";
            var allServices = (await _db.QueryAsync<DichVu>(sql)).ToList();

            if (!allServices.Any())
            {
                return "üòî D·∫° th∆∞a qu√Ω kh√°ch, hi·ªán t·∫°i kh√°ch s·∫°n Ocean c·ªßa ch√∫ng t√¥i kh√¥ng c√≥ d·ªãch v·ª• n√†o kh·∫£ d·ª•ng.";
            }

            // T√≠nh s·ªë l∆∞·ª£ng d·ªãch v·ª•
            int totalServices = allServices.Count;

            // T√≠nh gi√° dao ƒë·ªông (b·ªè qua c√°c d·ªãch v·ª• mi·ªÖn ph√≠)
            var paidServices = allServices.Where(s => s.DonGia > 0).ToList();
            decimal minPrice = paidServices.Any() ? paidServices.Min(s => s.DonGia) : 0;
            decimal maxPrice = paidServices.Any() ? paidServices.Max(s => s.DonGia) : 0;

            // T·∫°o danh s√°ch t√™n d·ªãch v·ª•
            var freeServices = allServices.Where(s => s.DonGia == 0).Select(s => s.TenDichVu).ToList();
            var paidServiceNames = paidServices.Select(s => s.TenDichVu).ToList();

            // T·∫°o c√¢u tr·∫£ l·ªùi t·ªïng quan
            var response = new List<string>
            {
                "üòä D·∫° th∆∞a qu√Ω kh√°ch, kh√°ch s·∫°n Ocean c·ªßa ch√∫ng t√¥i hi·ªán c√≥ c√°c d·ªãch v·ª• nh∆∞ sau:",
                $"- T·ªïng c·ªông c√≥ {totalServices} d·ªãch v·ª•.",
                paidServices.Any()
                    ? $"- Gi√° d·ªãch v·ª• dao ƒë·ªông t·ª´ {minPrice:N0} VND ƒë·∫øn {maxPrice:N0} VND."
                    : "- Hi·ªán t·∫°i t·∫•t c·∫£ c√°c d·ªãch v·ª• ƒë·ªÅu mi·ªÖn ph√≠! üéâ",
                freeServices.Any()
                    ? $"- C√°c d·ªãch v·ª• mi·ªÖn ph√≠ bao g·ªìm: {string.Join(", ", freeServices)}."
                    : "- Kh√¥ng c√≥ d·ªãch v·ª• mi·ªÖn ph√≠ n√†o hi·ªán t·∫°i.",
                paidServiceNames.Any()
                    ? $"- C√°c d·ªãch v·ª• c√≥ t√≠nh ph√≠ bao g·ªìm: {string.Join(", ", paidServiceNames)}."
                    : "- Kh√¥ng c√≥ d·ªãch v·ª• t√≠nh ph√≠ n√†o hi·ªán t·∫°i."
            };

            return string.Join("\n", response);
        }

        // H√†m l·ªçc c√°c tr∆∞·ªùng y√™u c·∫ßu t·ª´ th√¥ng tin ph√≤ng
        private object FilterRoomDetails(PhongWithTienNghi roomDetails, List<string> fields)
        {
            var result = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;

            if (fields.Contains("lo·∫°i ph√≤ng"))
                result["LoaiPhong"] = roomDetails.LoaiPhong;
            if (fields.Contains("gi√° ph√≤ng"))
                result["GiaPhong"] = roomDetails.GiaPhong;
            result["TinhTrang"] = (roomDetails.TinhTrang switch
            {
                "1" => "Tr·ªëng",
                "0" => "ƒê√£ c√≥ ng∆∞·ªùi ƒë·∫∑t",
                "3" => "ƒêang b·∫£o tr√¨",
                _ => "Kh√¥ng x√°c ƒë·ªãnh"
            }).ToString();
            if (fields.Contains("m√¥ t·∫£"))
                result["MoTa"] = roomDetails.MoTa;
            if (fields.Contains("ti·ªán nghi"))
                result["TienNghi"] = roomDetails.TienNghi;
            if (fields.Contains("h√¨nh ·∫£nh"))
                result["HinhAnh"] = roomDetails.UrlAnhChinh;
            if (fields.Contains("s·ªë l∆∞·ª£ng ph√≤ng"))
                result["SoLuongPhong"] = roomDetails.SoLuongPhong;
            if (fields.Contains("sao trung b√¨nh"))
                result["SaoTrungBinh"] = roomDetails.SoSaoTrungBinh;
            if (fields.Contains("t·∫ßng"))
                result["Tang"] = roomDetails.Tang;
            if (fields.Contains("ki·ªÉu gi∆∞·ªùng"))
                result["KieuGiuong"] = roomDetails.KieuGiuong;

            return result;
        }

        // H√†m l·ªçc c√°c tr∆∞·ªùng y√™u c·∫ßu t·ª´ th√¥ng tin d·ªãch v·ª•
        private object FilterServiceDetails(DichVu serviceDetails, List<string> fields)
        {
            var result = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;

            if (fields.Contains("t√™n d·ªãch v·ª•"))
                result["TenDichVu"] = serviceDetails.TenDichVu;
            if (fields.Contains("ƒë∆°n gi√°"))
                result["DonGia"] = serviceDetails.DonGia;
            if (fields.Contains("m√¥ t·∫£"))
                result["MoTaDichVu"] = serviceDetails.MoTaDichVu;
            if (fields.Contains("h√¨nh ·∫£nh"))
                result["UrlAnh"] = serviceDetails.UrlAnh;
            if (fields.Contains("tr·∫°ng th√°i"))
                result["TrangThai"] = serviceDetails.TrangThai switch
                {
                    1 => "Ho·∫°t ƒë·ªông",
                    0 => "Ng·ª´ng ho·∫°t ƒë·ªông",
                    _ => "Kh√¥ng x√°c ƒë·ªãnh"
                };

            return result;
        }

        private string GenerateResponseText(string roomCode, object filteredDetails)
        {
            var detailsDict = filteredDetails as IDictionary<string, object>;
            if (detailsDict == null || !detailsDict.Any())
                return $"D·∫° b·∫°n ∆°i, hi·ªán m√¨nh ch∆∞a t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho ph√≤ng {roomCode} ·∫°.";

            var parts = new List<string>();

            foreach (var item in detailsDict)
            {
                var label = item.Key;
                var value = item.Value?.ToString() ?? "ch∆∞a c√≥ th√¥ng tin";

                switch (label)
                {
                    case "TinhTrang":
                        parts.Add($"hi·ªán tr·∫°ng ph√≤ng l√† ƒëang {value.ToLower()}");
                        break;
                    case "TienNghi":
                        try
                        {
                            var list = System.Text.Json.JsonSerializer.Deserialize<List<string>>(value);
                            parts.Add($"ti·ªán nghi g·ªìm: {string.Join(", ", list)}");
                        }
                        catch
                        {
                            parts.Add($"ti·ªán nghi g·ªìm: {value}");
                        }
                        break;
                    case "LoaiPhong":
                        parts.Add($"lo·∫°i ph√≤ng l√† {value}");
                        break;
                    case "GiaPhong":
                        parts.Add($"gi√° ph√≤ng l√† {value} VNƒê");
                        break;
                    case "MoTa":
                        parts.Add($"m√¥ t·∫£: {value}");
                        break;
                    case "HinhAnh":
                        parts.Add($"h√¨nh ·∫£nh ph√≤ng: {value}");
                        break;
                    case "SoLuongPhong":
                        parts.Add($"s·ªë l∆∞·ª£ng ph√≤ng c√≤n l·∫°i l√† {value}");
                        break;
                    case "SaoTrungBinh":
                        parts.Add($"ph√≤ng ƒë∆∞·ª£c ƒë√°nh gi√° trung b√¨nh {value} sao");
                        break;
                    case "Tang":
                        parts.Add($"ph√≤ng n·∫±m ·ªü t·∫ßng {value}");
                        break;
                    case "KieuGiuong":
                        parts.Add($"ki·ªÉu gi∆∞·ªùng l√† : {value}");
                        break;
                    default:
                        parts.Add($"{label}: {value}");
                        break;
                }
            }

            return $"D·∫° b·∫°n ∆°i, th√¥ng tin ph√≤ng {roomCode} nh∆∞ sau: {string.Join(", ", parts)} ·∫°.";
        }

        private string GenerateServiceResponseText(string serviceCode, object filteredDetails)
        {
            var detailsDict = filteredDetails as IDictionary<string, object>;
            if (detailsDict == null || !detailsDict.Any())
                return $"D·∫° b·∫°n ∆°i, hi·ªán m√¨nh ch∆∞a t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho d·ªãch v·ª• {serviceCode} ·∫°.";

            var parts = new List<string>();

            foreach (var item in detailsDict)
            {
                var label = item.Key;
                var value = item.Value?.ToString() ?? "ch∆∞a c√≥ th√¥ng tin";

                switch (label)
                {
                    case "TenDichVu":
                        parts.Add($"t√™n d·ªãch v·ª• l√† {value}");
                        break;
                    case "DonGia":
                        parts.Add($"ƒë∆°n gi√° l√† {value} VNƒê");
                        break;
                    case "MoTaDichVu":
                        parts.Add($"m√¥ t·∫£: {value}");
                        break;
                    case "UrlAnh":
                        parts.Add($"h√¨nh ·∫£nh d·ªãch v·ª•: {value}");
                        break;
                    case "TrangThai":
                        parts.Add($"tr·∫°ng th√°i: {value}");
                        break;
                    default:
                        parts.Add($"{label}: {value}");
                        break;
                }
            }

            return $"D·∫° b·∫°n ∆°i, th√¥ng tin d·ªãch v·ª• {serviceCode} nh∆∞ sau: {string.Join(", ", parts)} ·∫°.";
        }
    }

    public class QueryResult
    {
        public string Code { get; set; }
        public List<string> Fields { get; set; }
    }

    public class RoomQueryResult
    {
        public string RoomCode { get; set; }
        public List<string> Fields { get; set; }
    }

    public class QueryRequest
    {
        public string Question { get; set; }
    }
}
