using System.Data;
using System.Reflection;
using Microsoft.Data.SqlClient;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// C·∫•u h√¨nh chu·ªói k·∫øt n·ªëi
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

// ƒêƒÉng k√Ω IDbConnection v·ªõi DI
builder.Services.AddScoped<IDbConnection>(sp => new SqlConnection(connectionString));

builder.Logging.AddConsole();

// C·∫•u h√¨nh CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins", policy =>
    {

        policy.AllowAnyOrigin() // Cho ph√©p m·ªçi domain
              .AllowAnyHeader()  // Cho ph√©p m·ªçi header
              .AllowAnyMethod(); // Cho ph√©p m·ªçi HTTP method (GET, POST, PUT, DELETE...)

    
    });
});

builder.Services.AddHttpClient();

// ƒê·ªçc c·∫•u h√¨nh SentimentModelPath t·ª´ appsettings.json
var sentimentModelPath = builder.Configuration["SentimentModelPath"];
builder.Services.AddSingleton(new SentimentModelConfig { ModelPath = sentimentModelPath });

// Th√™m Swagger v√† c√°c d·ªãch v·ª• kh√°c
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    options.IncludeXmlComments(xmlPath);

    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Nh·∫≠p 'Bearer' [space] v√† sau ƒë√≥ l√† token c·ªßa b·∫°n.",
    });

    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "Bearer" }
            },
            new string[] {}
        }
    });

    // Th√™m th√¥ng tin m√¥ t·∫£ API
    options.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "üè® H·ªá th·ªëng Qu·∫£n l√Ω Kh√°ch s·∫°n",
        Version = "v1",
        Description = @"
üìò **ƒê·ªÅ t√†i:** X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n l√Ω kh√°ch s·∫°n.

üîß **C√¥ng ngh·ªá s·ª≠ d·ª•ng:**
- ASP.NET Core Web API
- SQL Server
- Entity Framework/Dapper
- JWT Authentication
- Swagger UI
- (Tu·ª≥ ch·ªçn: React/Vue cho frontend, n·∫øu c√≥)

üéØ **Ch·ª©c nƒÉng ch√≠nh:**
- ƒêƒÉng k√Ω ng∆∞·ªùi d√πng bao g·ªìm admin, nh√¢n vi√™n, kh√°ch h√†ng
+ admin*(qu·∫£n tr·ªã vi√™n) c√≥ quy·ªÅn th√™m s·ª≠a x√≥a ph√≤ng ,xem tr·∫°ng th√°i ph√≤ng ,th√™m ti·ªán nghi 
+ nh√¢n vi√™n c√≥ quy·ªÅn s·ª≠a ph√≤ng 
+ kh√°ch h√†ng c√≥ quy·ªÅn ƒë·∫∑t ph√≤ng

- ƒê·∫∑t ph√≤ng, thanh to√°n, v√† xu·∫•t ho√° ƒë∆°n, v√† xem l·ªãch s·ª≠ giao d·ªãch
- Qu·∫£n l√Ω d·ªãch v·ª• ƒëi k√®m
- Xem ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng (feedback)
- Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng (admin, nh√¢n vi√™n, kh√°ch h√†ng)

üîó **GitHub Repository:** [https://github.com/Persinus/HotelManagementAPI](https://github.com/Persinus/HotelManagementAPI)
"
    });
});

builder.Services.AddControllers();

// ƒêƒÉng k√Ω IMemoryCache
builder.Services.AddMemoryCache();

// C·∫•u h√¨nh JWT
builder.Services.AddAuthentication("Bearer")
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true, // Ki·ªÉm tra Issuer
            ValidateAudience = true, // Ki·ªÉm tra Audience
            ValidateLifetime = true, // Ki·ªÉm tra th·ªùi gian s·ªëng c·ªßa token
            ValidateIssuerSigningKey = true, // Ki·ªÉm tra ch·ªØ k√Ω c·ªßa token
            ValidIssuer = "your-issuer", // Thay th·∫ø v·ªõi Issuer c·ªßa b·∫°n
            ValidAudience = "your-audience", // Thay th·∫ø v·ªõi Audience c·ªßa b·∫°n
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes("your_super_secret_key_1234567890") // Kh√≥a b√≠ m·∫≠t c·ªßa b·∫°n
            ),
            NameClaimType = "sub", // Ch·ªâ ƒë·ªãnh claim `sub` l√†m `Name`
            RoleClaimType = "Vaitro" // Ch·ªâ ƒë·ªãnh claim `Vaitro` l√†m `Role`
        };

        // ƒê·∫£m b·∫£o r·∫±ng Bearer token ƒë∆∞·ª£c truy·ªÅn v√†o
        options.Events = new JwtBearerEvents
        {
            OnChallenge = context =>
            {
                // Ki·ªÉm tra xem token c√≥ trong header Authorization kh√¥ng
                if (!context.Request.Headers.ContainsKey("Authorization"))
                {
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                    context.Response.ContentType = "application/json";
                    return Task.CompletedTask;
                }

                return Task.CompletedTask;
            }
        };
    });


builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("QuanTriVienPolicy", policy =>
        policy.RequireClaim("Vaitro", "QuanTriVien"));

    options.AddPolicy("NhanVienPolicy", policy =>
        policy.RequireClaim("Vaitro", "NhanVien", "QuanTriVien"));

    options.AddPolicy("KhachHangPolicy", policy =>
        policy.RequireClaim("Vaitro", "KhachHang","NhanVien", "QuanTriVien"));
});

var app = builder.Build();
app.UseStaticFiles();

// C·∫•u h√¨nh Swagger
var enableSwagger = builder.Configuration.GetValue<bool>("Swagger:Enable");
if (enableSwagger)
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Hotel Management API V1");
        c.RoutePrefix = string.Empty; // ƒê·∫∑t Swagger UI ·ªü root URL
        c.DocumentTitle = "Hotel Management API Documentation";
        c.InjectJavascript("/swagger-login.js"); // Correctly inject JavaScript in SwaggerUIOptions
        c.InjectStylesheet("/swagger-custom.css");
    });
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseCors("AllowAllOrigins"); // √Åp d·ª•ng ch√≠nh s√°ch CORS ƒë√£ c·∫•u h√¨nh

// Th√™m middleware x√°c th·ª±c v√† ph√¢n quy·ªÅn
app.UseAuthentication();
app.UseMiddleware<RoleMiddleware>();
app.UseAuthorization();

// ƒê·ªãnh tuy·∫øn c√°c controller
app.MapControllers();

// C·∫•u h√¨nh chuy·ªÉn h∆∞·ªõng HTTPS
app.UseHttpsRedirection();

app.Run();

// L·ªõp c·∫•u h√¨nh cho SentimentModelPath
public class SentimentModelConfig
{
    public string ModelPath { get; set; }
}
