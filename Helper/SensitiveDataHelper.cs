using System;
using System.Security.Cryptography;
using System.Text;

namespace HotelManagementAPI.Helper
{
    /// <summary>
    /// L·ªõp h·ªó tr·ª£ m√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu nh·∫°y c·∫£m (nh∆∞ m√£ ƒë·∫∑t ph√≤ng, CCCD, email, ...)
    /// S·ª≠ d·ª•ng AES (Advanced Encryption Standard) v·ªõi kh√≥a 256-bit v√† IV ng·∫´u nhi√™n.
    /// 
    /// üìö Gi·∫£i th√≠ch thu·∫≠t ng·ªØ:
    /// - üîê AES: Thu·∫≠t to√°n m√£ h√≥a ƒë·ªëi x·ª©ng, an to√†n, th∆∞·ªùng d√πng trong th·ª±c t·∫ø (256-bit l√† m·∫°nh nh·∫•t).
    /// - üîë Key (Kh√≥a m√£ h√≥a): Chu·ªói b√≠ m·∫≠t (32 byte ~ 256-bit) d√πng ƒë·ªÉ m√£ h√≥a/gi·∫£i m√£.
    /// - üßä IV (Initialization Vector): M·ªói l·∫ßn m√£ h√≥a s·∫Ω t·∫°o ng·∫´u nhi√™n 16 byte, gi√∫p k·∫øt qu·∫£ kh√°c nhau d√π n·ªôi dung gi·ªëng nhau.
    /// - üîÑ Encrypt/Decrypt: M√£ h√≥a chuy·ªÉn chu·ªói b√¨nh th∆∞·ªùng ‚Üí kh√≥ ƒë·ªçc (Base64); gi·∫£i m√£ th√¨ ng∆∞·ª£c l·∫°i.
    /// - üß∑ Base64: D·∫°ng m√£ h√≥a ƒë·ªÉ l∆∞u d·ªØ li·ªáu nh·ªã ph√¢n nh∆∞ chu·ªói vƒÉn b·∫£n (d·ªÖ l∆∞u DB, truy·ªÅn qua API).
    /// 
    /// ‚ö†Ô∏è L∆∞u √Ω: ƒê√¢y l√† m√£ h√≥a ƒë·ªëi x·ª©ng ‚Üí c·∫ßn gi·ªØ b√≠ m·∫≠t kh√≥a `Key`. N·∫øu b·ªã l·ªô ‚Üí c√≥ th·ªÉ gi·∫£i m√£ to√†n b·ªô d·ªØ li·ªáu!
    /// </summary>
    public static class SensitiveDataHelper
    {
        // Kh√≥a m√£ h√≥a 32 k√Ω t·ª± (256-bit), d√πng trong AES-256
        private static readonly string Key = "12345678901234567890123456789012";

        /// <summary>
        /// M√£ h√≥a m·ªôt chu·ªói vƒÉn b·∫£n (plain text) th√†nh d·∫°ng chu·ªói base64 (cipher text)
        /// </summary>
        /// <param name="plainText">Chu·ªói c·∫ßn m√£ h√≥a</param>
        /// <returns>Chu·ªói m√£ h√≥a d·∫°ng Base64 ch·ª©a IV + d·ªØ li·ªáu m√£ h√≥a</returns>
        public static string Encrypt(string plainText)
        {
            // 1. T·∫°o ƒë·ªëi t∆∞·ª£ng AES
            using var aes = Aes.Create();

            // 2. Thi·∫øt l·∫≠p kh√≥a m√£ h√≥a
            aes.Key = Encoding.UTF8.GetBytes(Key);

            // 3. Sinh IV ng·∫´u nhi√™n m·ªói l·∫ßn g·ªçi Encrypt (IV: 16 byte)
            aes.GenerateIV();
            var iv = aes.IV;

            // 4. T·∫°o encryptor v·ªõi Key + IV
            using var encryptor = aes.CreateEncryptor(aes.Key, iv);

            // 5. Chuy·ªÉn chu·ªói th√†nh m·∫£ng byte
            var plainBytes = Encoding.UTF8.GetBytes(plainText);

            // 6. M√£ h√≥a d·ªØ li·ªáu byte
            var encrypted = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);

            // 7. Gh√©p IV v√† d·ªØ li·ªáu m√£ h√≥a ‚Üí k·∫øt qu·∫£ cu·ªëi c√πng
            var result = new byte[iv.Length + encrypted.Length];
            Buffer.BlockCopy(iv, 0, result, 0, iv.Length); // IV ·ªü ƒë·∫ßu
            Buffer.BlockCopy(encrypted, 0, result, iv.Length, encrypted.Length); // D·ªØ li·ªáu m√£ h√≥a theo sau

            // 8. Chuy·ªÉn sang chu·ªói base64 ƒë·ªÉ d·ªÖ l∆∞u tr·ªØ ho·∫∑c truy·ªÅn API
            return Convert.ToBase64String(result);
        }

        /// <summary>
        /// Gi·∫£i m√£ m·ªôt chu·ªói base64 ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·ªüi h√†m Encrypt
        /// </summary>
        /// <param name="cipherText">Chu·ªói m√£ h√≥a d·∫°ng base64</param>
        /// <returns>Chu·ªói vƒÉn b·∫£n g·ªëc</returns>
        public static string Decrypt(string cipherText)
        {
            // 1. Chuy·ªÉn chu·ªói base64 v·ªÅ m·∫£ng byte
            var fullCipher = Convert.FromBase64String(cipherText);

            // 2. T·∫°o ƒë·ªëi t∆∞·ª£ng AES v√† thi·∫øt l·∫≠p kh√≥a
            using var aes = Aes.Create();
            aes.Key = Encoding.UTF8.GetBytes(Key);

            // 3. T√°ch IV t·ª´ ph·∫ßn ƒë·∫ßu c·ªßa chu·ªói byte (lu√¥n l√† 16 byte)
            var iv = new byte[16];
            Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
            aes.IV = iv;

            // 4. L·∫•y ph·∫ßn c√≤n l·∫°i l√† d·ªØ li·ªáu m√£ h√≥a
            var cipher = new byte[fullCipher.Length - iv.Length];
            Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, cipher.Length);

            // 5. T·∫°o decryptor v√† gi·∫£i m√£ d·ªØ li·ªáu
            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            var decrypted = decryptor.TransformFinalBlock(cipher, 0, cipher.Length);

            // 6. Tr·∫£ v·ªÅ chu·ªói vƒÉn b·∫£n g·ªëc
            return Encoding.UTF8.GetString(decrypted);
        }
    }
}
