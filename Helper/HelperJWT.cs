using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using HotelManagementAPI.Models; // Th√™m namespace ƒë·ªÉ truy c·∫≠p class NguoiDung

namespace HotelManagementAPI.Helper
{
    /// <summary>
    /// L·ªõp h·ªó tr·ª£ t·∫°o JWT token t·ª´ th√¥ng tin ng∆∞·ªùi d√πng.
    /// 
    /// üìö Gi·∫£i th√≠ch thu·∫≠t ng·ªØ:
    /// - üîê JWT (JSON Web Token): Chu·ªói m√£ h√≥a g·ªìm 3 ph·∫ßn: Header, Payload, Signature. D√πng ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng (stateless).
    /// - üßæ Claim: L√† m·ªôt "th√¥ng tin khai b√°o" nh∆∞ Id, email, vai tr√≤,... ƒë∆∞·ª£c nh√∫ng trong Token.
    /// - üîë Secret key: Chu·ªói b√≠ m·∫≠t (server gi·ªØ k√≠n), d√πng ƒë·ªÉ k√Ω token, gi√∫p x√°c minh t√≠nh h·ª£p l·ªá.
    /// - ‚è≥ Expire: Token c√≥ h·∫°n s·ª≠ d·ª•ng, h·∫øt h·∫°n th√¨ bu·ªôc ƒëƒÉng nh·∫≠p l·∫°i.
    /// - üõ°Ô∏è SigningCredentials: Th√¥ng tin d√πng ƒë·ªÉ k√Ω token v·ªõi thu·∫≠t to√°n (vd: HMAC SHA256).
    /// - üì§ Issuer: Ai ph√°t h√†nh token | üì• Audience: Ai ƒë∆∞·ª£c ph√©p nh·∫≠n token.
    /// 
    /// ‚ö†Ô∏è Token kh√¥ng m√£ h√≥a d·ªØ li·ªáu, ch·ªâ **k√Ω** ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn. KH√îNG n√™n nh√©t d·ªØ li·ªáu nh·∫°y c·∫£m v√†o JWT.
    /// </summary>
    public static class JwtHelper
    {
        /// <summary>
        /// T·∫°o JWT token t·ª´ th√¥ng tin ng∆∞·ªùi d√πng, s·ª≠ d·ª•ng secret key, issuer v√† audience
        /// </summary>
        /// <param name="nguoiDung">Th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o claims</param>
        /// <param name="secretKey">Chu·ªói b√≠ m·∫≠t d√πng ƒë·ªÉ k√Ω token</param>
        /// <param name="issuer">Ai ph√°t h√†nh token (vd: h·ªá th·ªëng b·∫°n)</param>
        /// <param name="audience">Ai s·∫Ω s·ª≠ d·ª•ng token n√†y</param>
        /// <returns>Chu·ªói JWT token h·ª£p l·ªá</returns>
        public static string GenerateJwtToken(NguoiDung nguoiDung, string secretKey, string issuer, string audience)
        {
            // 1. T·∫°o danh s√°ch claims (th√¥ng tin s·∫Ω ƒë∆∞·ª£c nh√∫ng v√†o token)
            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, nguoiDung.MaNguoiDung.ToString()), // M√£ ng∆∞·ªùi d√πng
                new Claim("Vaitro", nguoiDung.Vaitro), // Vai tr√≤: Admin, LeTan, KhachHang,...
                new Claim(JwtRegisteredClaimNames.Email, nguoiDung.Email), // Email ng∆∞·ªùi d√πng
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()) // M√£ ƒë·ªãnh danh token (gi√∫p ch·ªëng tr√πng l·∫∑p)
            };

            // 2. (Tu·ª≥ ch·ªçn) Ghi log ra console ƒë·ªÉ ki·ªÉm tra c√°c claims ƒë√£ nh√∫ng
            Console.WriteLine("Claims khi t·∫°o JWT token:");
            foreach (var claim in claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
            }

            // 3. T·∫°o ƒë·ªëi t∆∞·ª£ng ch·ª©a key k√Ω token
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));

            // 4. T·∫°o th√¥ng tin k√Ω v·ªõi thu·∫≠t to√°n SHA256
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            // 5. T·∫°o JWT token ho√†n ch·ªânh
            var token = new JwtSecurityToken(
                issuer: issuer,         // Ai ph√°t h√†nh (vd: api.hotel.com)
                audience: audience,     // Ai d√πng (vd: frontend.hotel.com)
                claims: claims,         // D·ªØ li·ªáu trong token
                expires: DateTime.Now.AddHours(1), // Token s·ªëng 1 ti·∫øng
                signingCredentials: creds // K√Ω token ƒë·ªÉ tr√°nh b·ªã gi·∫£ m·∫°o
            );

            // 6. Tr·∫£ v·ªÅ chu·ªói token (d·∫°ng .xxxx.yyyy.zzzz)
            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
